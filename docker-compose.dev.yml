version: '3.8'

services:
  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: url_manage_db_dev
    environment:
      POSTGRES_DB: url_manage_db_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - url_manage_network_dev

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: url_manage_redis_dev
    ports:
      - "6379:6379"
    networks:
      - url_manage_network_dev

  # Django后端（开发模式）
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: url_manage_backend_dev
    environment:
      - DEBUG=True
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=url_manage_db_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SECRET_KEY=dev-secret-key-not-for-production
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - url_manage_network_dev
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  # React前端（开发模式）
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: url_manage_frontend_dev
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - url_manage_network_dev
    command: npm start

volumes:
  postgres_data_dev:

networks:
  url_manage_network_dev:
    driver: bridge